
import React from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { 
  FileSpreadsheet, 
  FileText, 
  BarChart4, 
  PieChart, 
  Download, 
  Clock, 
  Calendar,
  RefreshCw,
  FileBarChart,
  FilePieChart,
  FileLineChart,
  ExternalLink,
  Printer
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ReportCardProps {
  title: string;
  description: string;
  icon: React.ReactNode;
  lastUpdated: string;
  category: string;
  onDownload: () => void;
  onPrint: () => void;
  onView: () => void;
}

const ReportCard: React.FC<ReportCardProps> = ({ 
  title, 
  description, 
  icon, 
  lastUpdated, 
  category,
  onDownload,
  onPrint,
  onView
}) => (
  <Card className="h-full">
    <CardHeader className="pb-3">
      <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center mb-2">
        {icon}
      </div>
      <CardTitle>{title}</CardTitle>
      <CardDescription>{description}</CardDescription>
    </CardHeader>
    <CardContent className="pb-2">
      <div className="flex items-center text-sm text-muted-foreground mt-2">
        <Clock className="mr-1 h-3 w-3" /> Last updated: {lastUpdated}
      </div>
    </CardContent>
    <CardFooter className="flex justify-between items-center pt-1">
      <div className="flex gap-2">
        <Button variant="outline" size="sm" className="gap-2" onClick={onDownload}>
          <Download className="h-3 w-3" /> Download
        </Button>
        <Button variant="outline" size="sm" className="gap-2" onClick={onPrint}>
          <Printer className="h-3 w-3" /> Print
        </Button>
      </div>
      <Button size="sm" variant="ghost" className="gap-1 text-xs" onClick={onView}>
        View <ExternalLink className="h-3 w-3" />
      </Button>
    </CardFooter>
  </Card>
);

const ReportsPage: React.FC = () => {
  const { toast } = useToast();
  
  const handleGenerateReport = () => {
    toast({
      title: "Generating report",
      description: "Your custom report is being generated. This may take a moment.",
    });
    
    // Simulate report generation
    setTimeout(() => {
      toast({
        title: "Report generated",
        description: "Your custom report has been generated successfully.",
      });
    }, 2000);
  };

  const handleDownloadReport = (title: string) => {
    toast({
      title: "Download started",
      description: `${title} is being downloaded.`,
    });
    
    // Simulate download
    setTimeout(() => {
      toast({
        title: "Download complete",
        description: `${title} has been downloaded successfully.`,
      });
    }, 1500);
  };

  const handlePrintReport = (title: string) => {
    toast({
      title: "Preparing to print",
      description: `${title} is being prepared for printing.`,
    });
    
    // Create printable content
    const printContent = `
      <html>
        <head>
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #333; }
            .report-header { border-bottom: 1px solid #ddd; padding-bottom: 10px; margin-bottom: 20px; }
            .report-meta { color: #666; font-size: 14px; margin-bottom: 20px; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <div class="report-header">
            <h1>${title}</h1>
            <div class="report-meta">
              <p>Generated on: ${new Date().toLocaleDateString()}</p>
              <p>Generated by: Finance Department</p>
            </div>
          </div>
          <div class="report-content">
            <h2>Report Summary</h2>
            <p>This is a financial report generated by the system. In a real implementation, this would contain actual financial data.</p>
            
            <h2>Financial Details</h2>
            <table>
              <thead>
                <tr>
                  <th>Category</th>
                  <th>Current Month</th>
                  <th>Previous Month</th>
                  <th>Change</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Revenue</td>
                  <td>$125,430.00</td>
                  <td>$118,240.00</td>
                  <td>+6.1%</td>
                </tr>
                <tr>
                  <td>Expenses</td>
                  <td>$84,210.00</td>
                  <td>$79,650.00</td>
                  <td>+5.7%</td>
                </tr>
                <tr>
                  <td>Profit</td>
                  <td>$41,220.00</td>
                  <td>$38,590.00</td>
                  <td>+6.8%</td>
                </tr>
                <tr>
                  <td>Cash Flow</td>
                  <td>$38,750.00</td>
                  <td>$35,240.00</td>
                  <td>+10.0%</td>
                </tr>
              </tbody>
            </table>
            
            <p>Note: This is a sample report for demonstration purposes only.</p>
          </div>
        </body>
      </html>
    `;
    
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printContent);
      printWindow.document.close();
      
      // Wait for content to load before printing
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
        
        toast({
          title: "Print prepared",
          description: "The report has been sent to the printer.",
        });
      }, 500);
    } else {
      toast({
        title: "Print error",
        description: "Unable to open print preview. Please check your popup settings.",
        variant: "destructive"
      });
    }
  };

  const handleViewReport = (title: string) => {
    toast({
      title: "Viewing report",
      description: `${title} is being opened for viewing.`,
    });
    // In a real implementation, this would open a detailed view
  };

  // Financial reports data
  const financialReports = [
    {
      id: '1',
      title: "Profit & Loss",
      description: "Monthly profit and loss statement",
      icon: <FileBarChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Today at 9:15 AM",
      category: "financial"
    },
    {
      id: '2',
      title: "Balance Sheet",
      description: "Assets, liabilities and equity",
      icon: <FileText className="h-5 w-5 text-primary" />,
      lastUpdated: "Yesterday at 3:45 PM",
      category: "financial"
    },
    {
      id: '3',
      title: "Cash Flow",
      description: "Monthly cash flow statement",
      icon: <FileLineChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 15, 2023",
      category: "financial"
    },
    {
      id: '4',
      title: "Expense Report",
      description: "Detailed breakdown of expenses",
      icon: <FilePieChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 12, 2023",
      category: "financial"
    },
    {
      id: '5',
      title: "Revenue Analysis",
      description: "Revenue breakdown by channels",
      icon: <FileBarChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 10, 2023",
      category: "financial"
    },
    {
      id: '6',
      title: "Financial Ratios",
      description: "Key financial performance indicators",
      icon: <FileSpreadsheet className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 5, 2023",
      category: "financial"
    }
  ];

  // Sales reports data
  const salesReports = [
    {
      id: '7',
      title: "Sales Summary",
      description: "Overview of sales performance",
      icon: <BarChart4 className="h-5 w-5 text-primary" />,
      lastUpdated: "Today at 10:30 AM",
      category: "sales"
    },
    {
      id: '8',
      title: "Sales by Product",
      description: "Product-wise sales breakdown",
      icon: <FileBarChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Yesterday at 5:20 PM",
      category: "sales"
    },
    {
      id: '9',
      title: "Customer Analysis",
      description: "Sales data by customer segments",
      icon: <FilePieChart className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 14, 2023",
      category: "sales"
    }
  ];

  // Tax reports data
  const taxReports = [
    {
      id: '10',
      title: "Tax Summary",
      description: "Summary of taxes paid and owed",
      icon: <FileSpreadsheet className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 18, 2023",
      category: "tax"
    },
    {
      id: '11',
      title: "Sales Tax Report",
      description: "Detailed sales tax breakdown",
      icon: <FileText className="h-5 w-5 text-primary" />,
      lastUpdated: "Nov 5, 2023",
      category: "tax"
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold">Reports</h1>
          <p className="text-muted-foreground">View and generate financial reports</p>
        </div>
        
        <div className="flex items-center gap-2">
          <Button className="gap-2" onClick={handleGenerateReport}>
            <FileBarChart className="h-4 w-4" />
            Generate Report
          </Button>
          <Button variant="outline" className="gap-2">
            <RefreshCw className="h-4 w-4" />
            Refresh
          </Button>
        </div>
      </div>
      
      <Tabs defaultValue="financial">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="financial">Financial</TabsTrigger>
          <TabsTrigger value="sales">Sales</TabsTrigger>
          <TabsTrigger value="tax">Tax</TabsTrigger>
          <TabsTrigger value="custom">Custom</TabsTrigger>
        </TabsList>
        
        <TabsContent value="financial" className="pt-6">
          <div className="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {financialReports.map(report => (
              <ReportCard 
                key={report.id}
                title={report.title} 
                description={report.description} 
                icon={report.icon} 
                lastUpdated={report.lastUpdated}
                category={report.category}
                onDownload={() => handleDownloadReport(report.title)}
                onPrint={() => handlePrintReport(report.title)}
                onView={() => handleViewReport(report.title)}
              />
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="sales" className="pt-6">
          <div className="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {salesReports.map(report => (
              <ReportCard 
                key={report.id}
                title={report.title} 
                description={report.description} 
                icon={report.icon} 
                lastUpdated={report.lastUpdated}
                category={report.category}
                onDownload={() => handleDownloadReport(report.title)}
                onPrint={() => handlePrintReport(report.title)}
                onView={() => handleViewReport(report.title)}
              />
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="tax" className="pt-6">
          <div className="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {taxReports.map(report => (
              <ReportCard 
                key={report.id}
                title={report.title} 
                description={report.description} 
                icon={report.icon} 
                lastUpdated={report.lastUpdated}
                category={report.category}
                onDownload={() => handleDownloadReport(report.title)}
                onPrint={() => handlePrintReport(report.title)}
                onView={() => handleViewReport(report.title)}
              />
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="custom" className="pt-6">
          <div className="text-center py-20">
            <Calendar className="h-12 w-12 mx-auto text-gray-400" />
            <h3 className="mt-4 text-lg font-medium">No custom reports yet</h3>
            <p className="text-muted-foreground mt-2 mb-6">Generate your first custom report to see it here.</p>
            <Button className="gap-2" onClick={handleGenerateReport}>
              <FileBarChart className="h-4 w-4" />
              Create Custom Report
            </Button>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ReportsPage;
